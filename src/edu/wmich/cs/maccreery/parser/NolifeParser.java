/* NolifeParser.java */
/* Generated By:JavaCC: Do not edit this line. NolifeParser.java */
package edu.wmich.cs.maccreery.parser;

import edu.wmich.cs.maccreery.ast.*;
import edu.wmich.cs.maccreery.visitor.TypeTable;

public class NolifeParser implements NolifeParserConstants {

  static final public ProgramNode program() throws ParseException {ASTVectorNode variableDecls = new ASTVectorNode();
        ASTVectorNode subProgDecls = new ASTVectorNode();
        CompoundStatementNode body;
        Token prog,name;
    prog = jj_consume_token(O_PROGRAM);
    name = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_VAR:{
      variableDecls = decls();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_FUNCTION:
    case O_PROCEDURE:{
      subProgDecls = subprogram_decls();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    body = compound_stmt();
ProgramNode programNode = new ProgramNode(name.image,variableDecls,subProgDecls,body);
        programNode.setLineNumber(prog.beginLine);
        programNode.setParent(null);

        for (int i = 0; i < variableDecls.size(); i++) {
                VariableDeclarationNode decl = (VariableDeclarationNode)variableDecls.elementAt(i);
                decl.setParent(programNode);
        }

        for (int i = 0; i < subProgDecls.size(); i++) {
                SubProgramDeclNode decl = (SubProgramDeclNode)subProgDecls.elementAt(i);
                decl.setParent(programNode);
        }
        body.setParent(programNode);

        {if ("" != null) return programNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode decls() throws ParseException {ASTVectorNode declList;
    jj_consume_token(O_VAR);
    declList = decl_list();
{if ("" != null) return declList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode decl_list() throws ParseException {ASTVectorNode declList = new ASTVectorNode();
        VariableDeclarationNode variableDecl;
        ASTVectorNode idList;
        TypeNode idType;
        Token semi;
    label_1:
    while (true) {
      idList = identifier_list();
      jj_consume_token(O_COLON);
      idType = type();
      semi = jj_consume_token(O_SEMICOLON);
variableDecl = new VariableDeclarationNode(idList,idType);
        variableDecl.setLineNumber(semi.beginLine);
        declList.add(variableDecl);
        idType.setParent(variableDecl);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
{if ("" != null) return declList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode identifier_list() throws ParseException {ASTVectorNode idList = new ASTVectorNode();
        String name;
        Token id;
    id = jj_consume_token(O_IDENTIFIER);
name = new String(id.image);
                idList.add(name);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(O_COMMA);
      id = jj_consume_token(O_IDENTIFIER);
name = new String(id.image);
                idList.add(name);
    }
{if ("" != null) return idList;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeNode type() throws ParseException {TypeNode typeN;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_CHARACTER:
    case O_FLOAT:
    case O_INTEGER:{
      typeN = standard_type();
      break;
      }
    case O_ARRAY:{
      typeN = array_type();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return typeN;}
    throw new Error("Missing return statement in function");
  }

  static final public StandardTypeNode standard_type() throws ParseException {StandardTypeNode standardType;
        Token stype;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_INTEGER:{
      stype = jj_consume_token(O_INTEGER);
standardType = new StandardTypeNode(TypeTable.INT_TYPE);
                        standardType.setLineNumber(stype.beginLine);
      break;
      }
    case O_FLOAT:{
      stype = jj_consume_token(O_FLOAT);
standardType = new StandardTypeNode(TypeTable.FLOAT_TYPE);
                        standardType.setLineNumber(stype.beginLine);
      break;
      }
    case O_CHARACTER:{
      stype = jj_consume_token(O_CHARACTER);
standardType = new StandardTypeNode(TypeTable.CHAR_TYPE);
                         standardType.setLineNumber(stype.beginLine);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return standardType;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayTypeNode array_type() throws ParseException {ArrayTypeNode arrayType;
        DimensionNode dimension;
        StandardTypeNode typeNode;
        Token array;
    array = jj_consume_token(O_ARRAY);
    jj_consume_token(O_LBRACKET);
    dimension = dim();
    jj_consume_token(O_RBRACKET);
    jj_consume_token(O_OF);
    typeNode = standard_type();
arrayType = new ArrayTypeNode(dimension,typeNode);
        arrayType.setLineNumber(array.beginLine);
        dimension.setParent(arrayType);
        typeNode.setParent(arrayType);

        {if ("" != null) return arrayType;}
    throw new Error("Missing return statement in function");
  }

  static final public DimensionNode dim() throws ParseException {DimensionNode dimNode;
        Token lower,upper;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_INT:{
      lower = jj_consume_token(O_INT);
      jj_consume_token(O_DOTDOT);
      upper = jj_consume_token(O_INT);
int lowerBound = Integer.valueOf(lower.image).intValue();
                        int upperBound = Integer.valueOf(upper.image).intValue();

                        dimNode = new IntegerDimensionNode(lowerBound,upperBound);
                        dimNode.setLineNumber(lower.beginLine);
      break;
      }
    case O_CHAR:{
      lower = jj_consume_token(O_CHAR);
      jj_consume_token(O_DOTDOT);
      upper = jj_consume_token(O_CHAR);
dimNode = new CharacterDimensionNode(lower.image.charAt(1),
                                                         upper.image.charAt(1));
                        dimNode.setLineNumber(lower.beginLine);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return dimNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode subprogram_decls() throws ParseException {ASTVectorNode subProgDecls = new ASTVectorNode();
        SubProgramDeclNode subDecl = null;
    label_3:
    while (true) {
      subDecl = subprogram_decl();
      jj_consume_token(O_SEMICOLON);
subProgDecls.add(subDecl);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_FUNCTION:
      case O_PROCEDURE:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
{if ("" != null) return subProgDecls;}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgramDeclNode subprogram_decl() throws ParseException {SubProgramDeclNode declNode;
        ASTVectorNode variableDecls = new ASTVectorNode();
        CompoundStatementNode body;
    declNode = subprogram_head();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_VAR:{
      variableDecls = decls();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    body = compound_stmt();
declNode.setVariableDecls(variableDecls);
                    declNode.setBody(body);
                    for (int i = 0; i < variableDecls.size(); i++) {
                      VariableDeclarationNode decl = (VariableDeclarationNode)variableDecls.elementAt(i);
                      decl.setParent(declNode);
                    }
                    body.setParent(declNode);

                    {if ("" != null) return declNode;}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgramDeclNode subprogram_head() throws ParseException {SubProgramDeclNode declNode;
        ASTVectorNode paramList = new ASTVectorNode();
        StandardTypeNode declType;
        Token func,name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_FUNCTION:{
      func = jj_consume_token(O_FUNCTION);
      name = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_LPAREN:{
        paramList = arguments();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(O_COLON);
      declType = standard_type();
      jj_consume_token(O_SEMICOLON);
declNode = new FunctionDeclNode(name.image,paramList,declType);
                            declNode.setLineNumber(func.beginLine);
                            declType.setParent(declNode);
                            for (int i = 0; i < paramList.size(); i++) {
                              VariableDeclarationNode decl = (VariableDeclarationNode)paramList.elementAt(i);
                              decl.setParent(declNode);
                            }
      break;
      }
    case O_PROCEDURE:{
      func = jj_consume_token(O_PROCEDURE);
      name = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_LPAREN:{
        paramList = arguments();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
declNode = new ProcedureDeclNode(name.image,paramList);
                            declNode.setLineNumber(func.beginLine);
                            for (int i = 0; i < paramList.size(); i++) {
                              VariableDeclarationNode decl = (VariableDeclarationNode)paramList.elementAt(i);
                              decl.setParent(declNode);
                            }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return declNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode arguments() throws ParseException {ASTVectorNode paramList;
    jj_consume_token(O_LPAREN);
    paramList = parameter_list();
    jj_consume_token(O_RPAREN);
{if ("" != null) return paramList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode parameter_list() throws ParseException {ASTVectorNode paramList = new ASTVectorNode();
        ASTVectorNode idList;
        TypeNode idType;
        VariableDeclarationNode paramDecl;
        Token token;
    idList = identifier_list();
    token = jj_consume_token(O_COLON);
    idType = type();
paramDecl = new VariableDeclarationNode(idList,idType);
                     paramDecl.setLineNumber(token.beginLine);
                     paramList.add(paramDecl);
                     idType.setParent(paramDecl);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(O_SEMICOLON);
      idList = identifier_list();
      token = jj_consume_token(O_COLON);
      idType = type();
paramDecl = new VariableDeclarationNode(idList,idType);
                     paramDecl.setLineNumber(token.beginLine);
                     paramList.add(paramDecl);
                     idType.setParent(paramDecl);
    }
{if ("" != null) return paramList;}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundStatementNode compound_stmt() throws ParseException {CompoundStatementNode compoundStmt;
        ASTVectorNode stmtList;
        Token token;
    token = jj_consume_token(O_BEGIN);
    stmtList = stmt_list();
    jj_consume_token(O_END);
compoundStmt = new CompoundStatementNode(stmtList);
            compoundStmt.setLineNumber(token.beginLine);
                for (int i = 0; i < stmtList.size(); i++) {
                StatementNode stmt = (StatementNode)stmtList.elementAt(i);
                stmt.setParent(compoundStmt);
                }

                {if ("" != null) return compoundStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode stmt_list() throws ParseException {ASTVectorNode stmtList = new ASTVectorNode();
        StatementNode stmtNode;
    stmtNode = stmt();
stmtList.add(stmtNode);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(O_SEMICOLON);
      stmtNode = stmt();
stmtList.add(stmtNode);
    }
{if ("" != null) return stmtList;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode stmt() throws ParseException {StatementNode stmtNode;
        ExpressionNode invocation = null;
    if (jj_2_1(2)) {
      stmtNode = assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_IF:{
        stmtNode = if_stmt();
        break;
        }
      case O_WHILE:{
        stmtNode = while_stmt();
        break;
        }
      case O_IDENTIFIER:{
        invocation = procedure_invocation();
stmtNode = new ProcedureInvocationNode((InvocationNode)invocation);
                                stmtNode.setLineNumber(invocation.getLineNumber());
                                invocation.setParent(stmtNode);
        break;
        }
      case O_READ:
      case O_WRITE:{
        stmtNode = i_o_stmt();
        break;
        }
      case O_BEGIN:{
        stmtNode = compound_stmt();
        break;
        }
      case O_RETURN:{
        stmtNode = return_stmt();
        break;
        }
      case O_CASE:{
        stmtNode = case_stmt();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return stmtNode;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatementNode assignment() throws ParseException {AssignmentStatementNode assignStmt;
        VariableReferenceNode lhs;
        ExpressionNode rhs;
        Token token;
    lhs = variable();
    token = jj_consume_token(O_ASSIGN);
    rhs = expr();
assignStmt = new AssignmentStatementNode(lhs,rhs);
    assignStmt.setLineNumber(token.beginLine);
    lhs.setParent(assignStmt);
    rhs.setParent(assignStmt);

    {if ("" != null) return assignStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatementNode if_stmt() throws ParseException {IfStatementNode ifStmt;
        StatementNode thenStmt;
        StatementNode elseStmt = null;
        ExpressionNode testExpr;
        Token token;
    token = jj_consume_token(O_IF);
    testExpr = expr();
    jj_consume_token(O_THEN);
    thenStmt = stmt();
    if (jj_2_2(2147483647)) {
      jj_consume_token(O_ELSE);
      elseStmt = stmt();
    } else {
      ;
    }
ifStmt = new IfStatementNode(testExpr,thenStmt,elseStmt);
                    ifStmt.setLineNumber(token.beginLine);
                    testExpr.setParent(ifStmt);
                    thenStmt.setParent(ifStmt);
                    if (elseStmt != null)
                      elseStmt.setParent(ifStmt);

                    {if ("" != null) return ifStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatementNode while_stmt() throws ParseException {WhileStatementNode whileStmt;
        ExpressionNode whileExpr;
        StatementNode controlStmt;
        Token token;
    token = jj_consume_token(O_WHILE);
    whileExpr = expr();
    jj_consume_token(O_DO);
    controlStmt = stmt();
whileStmt = new WhileStatementNode(whileExpr,controlStmt);
                    whileStmt.setLineNumber(token.beginLine);
                    whileExpr.setParent(whileStmt);
                    controlStmt.setParent(whileStmt);

                    {if ("" != null) return whileStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public InvocationNode procedure_invocation() throws ParseException {InvocationNode invocation ;
        ASTVectorNode exprList = new ASTVectorNode();
        Token token;
    token = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_NOT:
    case O_LPAREN:
    case O_CHAR:
    case O_IDENTIFIER:
    case O_FLOATCON:
    case O_INT:{
      exprList = expr_list();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(O_RPAREN);
invocation = new InvocationNode(token.image,exprList);
                   invocation.setLineNumber(token.beginLine);
                   for (int i = 0; i < exprList.size(); i++) {
                     ExpressionNode expr = (ExpressionNode)exprList.elementAt(i);
                     expr.setParent(invocation);
                   }

                   {if ("" != null) return invocation;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode i_o_stmt() throws ParseException {StatementNode ioStmt;
        VariableReferenceNode varNode = null;
        ASTNode writeExpr = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_READ:{
      token = jj_consume_token(O_READ);
      jj_consume_token(O_LPAREN);
      varNode = variable();
      jj_consume_token(O_RPAREN);
ioStmt = new ReadStatementNode(varNode);
                    ioStmt.setLineNumber(token.beginLine);
                    varNode.setParent(ioStmt);
      break;
      }
    case O_WRITE:{
      token = jj_consume_token(O_WRITE);
      jj_consume_token(O_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_NOT:
      case O_LPAREN:
      case O_CHAR:
      case O_IDENTIFIER:
      case O_FLOATCON:
      case O_INT:{
        writeExpr = expr();
        break;
        }
      case O_STRING:{
        writeExpr = string();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_RPAREN);
ioStmt = new WriteStatementNode(writeExpr);
                    ioStmt.setLineNumber(token.beginLine);
                    writeExpr.setParent(ioStmt);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ioStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatementNode return_stmt() throws ParseException {ReturnStatementNode returnStmt;
        ExpressionNode exprNode;
        Token token;
    token = jj_consume_token(O_RETURN);
    exprNode = expr();
returnStmt = new ReturnStatementNode(exprNode);
            returnStmt.setLineNumber(token.beginLine);
            exprNode.setParent(returnStmt);

            {if ("" != null) return returnStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseStatementNode case_stmt() throws ParseException {CaseStatementNode caseStatement;
        ExpressionNode caseExpr;
        ASTVectorNode caseList = new ASTVectorNode();
        Token token;
    token = jj_consume_token(O_CASE);
    caseExpr = expr();
    jj_consume_token(O_OF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_FLOATCON:
    case O_INT:{
      caseList = cases();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(O_END);
caseStatement = new CaseStatementNode(caseExpr,caseList);
                   caseStatement.setLineNumber(token.beginLine);
                   caseExpr.setParent(caseStatement);
                   for (int i = 0; i < caseList.size(); i++) {
                     CaseElementNode elem = (CaseElementNode)caseList.elementAt(i);
                     elem.setParent(caseStatement);
                   }

                   {if ("" != null) return caseStatement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode cases() throws ParseException {ASTVectorNode caseList = new ASTVectorNode();
        CaseElementNode caseElement;
    caseElement = case_element();
caseList.add(caseElement);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(O_SEMICOLON);
      caseElement = case_element();
caseList.add(caseElement);
    }
{if ("" != null) return caseList;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseElementNode case_element() throws ParseException {CaseElementNode caseElement;
        StatementNode stmtNode;
        ASTVectorNode caseLabelList;
        Token token;
    caseLabelList = case_labels();
    token = jj_consume_token(O_COLON);
    stmtNode = stmt();
caseElement = new CaseElementNode(caseLabelList,stmtNode);
            caseElement.setLineNumber(token.beginLine);
            stmtNode.setParent(caseElement);
            for (int i = 0; i < caseLabelList.size(); i++) {
              ConstantNode constN = (ConstantNode)caseLabelList.elementAt(i);
              constN.setParent(caseElement);
            }

            {if ("" != null) return caseElement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode case_labels() throws ParseException {ASTVectorNode caseLabelList = new ASTVectorNode();
        ConstantNode constNode = null;
    constNode = constant();
caseLabelList.add(constNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(O_COMMA);
      constNode = constant();
caseLabelList.add(constNode);
    }
{if ("" != null) return caseLabelList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVectorNode expr_list() throws ParseException {ASTVectorNode exprList = new ASTVectorNode();
        ExpressionNode exprNode = null;
    exprNode = expr();
exprList.add(exprNode);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(O_COMMA);
      exprNode = expr();
exprList.add(exprNode);
    }
{if ("" != null) return exprList;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode expr() throws ParseException {ExpressionNode exprNode;
        ExpressionNode term1Node = null;
        ExpressionNode exprPrimeNode = null;
    term1Node = term1();
    exprPrimeNode = exprPrime();
if (exprPrimeNode != null) {
              ((BinaryExpressionNode)exprPrimeNode).setLeftOperand(term1Node);
              exprNode = exprPrimeNode;
              term1Node.setParent(exprNode);
            }
            else
              exprNode = term1Node;
            exprNode.setLineNumber(term1Node.getLineNumber());

            {if ("" != null) return exprNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode exprPrime() throws ParseException {ExpressionNode exprPrimeNode;
        ExpressionNode term1Node = null;
        ExpressionNode epNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_OR:{
      token = jj_consume_token(O_OR);
      term1Node = term1();
      epNode = exprPrime();
if (epNode != null) {
                              ((BinaryExpressionNode)epNode).setLeftOperand(term1Node);
                              term1Node.setParent(epNode);
                            }
                            else
                              epNode = term1Node;
                            exprPrimeNode = new OrExpressionNode(epNode);
                            exprPrimeNode.setLineNumber(token.beginLine);
                            epNode.setParent(exprPrimeNode);
      break;
      }
    case O_AND:{
      token = jj_consume_token(O_AND);
      term1Node = term1();
      epNode = exprPrime();
if (epNode != null) {
                              ((BinaryExpressionNode)epNode).setLeftOperand(term1Node);
                              term1Node.setParent(epNode);
                        }
                            else
                              epNode = term1Node;
                            exprPrimeNode = new AndExpressionNode(epNode);
                            exprPrimeNode.setLineNumber(token.beginLine);
                            epNode.setParent(exprPrimeNode);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
exprPrimeNode = null;
    }
{if ("" != null) return exprPrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term1() throws ParseException {ExpressionNode term1Node;
        ExpressionNode term2Node = null;
        ExpressionNode term1PrimeNode = null;
    term2Node = term2();
    term1PrimeNode = term1Prime();
if (term1PrimeNode != null) {
                      ((BinaryExpressionNode)term1PrimeNode).setLeftOperand(term2Node);
                      term1Node = term1PrimeNode;
                      term2Node.setParent(term1Node);
                    }
                    else
                      term1Node = term2Node;
                    term1Node.setLineNumber(term2Node.getLineNumber());

                    {if ("" != null) return term1Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term1Prime() throws ParseException {ExpressionNode term1PrimeNode;
        ExpressionNode term2Node = null;
        ExpressionNode t1pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_LT:{
      token = jj_consume_token(O_LT);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null) {
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                              term2Node.setParent(t1pNode);
                            }
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new LessThanExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    case O_LE:{
      token = jj_consume_token(O_LE);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null) {
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                              term2Node.setParent(t1pNode);
                            }
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new LessEqualExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    case O_GT:{
      token = jj_consume_token(O_GT);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null) {
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                              term2Node.setParent(t1pNode);
                            }
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new GreaterThanExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    case O_GE:{
      token = jj_consume_token(O_GE);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null) {
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                              term2Node.setParent(t1pNode);
                            }
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new GreaterEqualExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    case O_NE:{
      token = jj_consume_token(O_NE);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null) {
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                              term2Node.setParent(t1pNode);
                            }
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new NotEqualExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    case O_EQ:{
      token = jj_consume_token(O_EQ);
      term2Node = term2();
      t1pNode = term1Prime();
if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).setLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = new EqualExpressionNode(t1pNode);
                            term1PrimeNode.setLineNumber(token.beginLine);
                            t1pNode.setParent(term1PrimeNode);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
term1PrimeNode = null;
    }
{if ("" != null) return term1PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term2() throws ParseException {ExpressionNode term2Node;
        ExpressionNode term3Node = null;
        ExpressionNode term2PrimeNode = null;
    term3Node = term3();
    term2PrimeNode = term2Prime();
if (term2PrimeNode != null) {
                      ((BinaryExpressionNode)term2PrimeNode).setLeftOperand(term3Node);
                      term2Node = term2PrimeNode;
                      term3Node.setParent(term2PrimeNode);
                    }
                    else
                      term2Node = term3Node;
                    term2Node.setLineNumber(term3Node.getLineNumber());

                    {if ("" != null) return term2Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term2Prime() throws ParseException {ExpressionNode term2PrimeNode;
        ExpressionNode term3Node = null;
        ExpressionNode t2pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_PLUS:{
      token = jj_consume_token(O_PLUS);
      term3Node = term3();
      t2pNode = term2Prime();
if (t2pNode != null) {
                              ((BinaryExpressionNode)t2pNode).setLeftOperand(term3Node);
                              term3Node.setParent(t2pNode);
                            }
                            else
                              t2pNode = term3Node;
                            term2PrimeNode = new AddExpressionNode(t2pNode);
                            term2PrimeNode.setLineNumber(token.beginLine);
                            t2pNode.setParent(term2PrimeNode);
      break;
      }
    case O_MINUS:{
      token = jj_consume_token(O_MINUS);
      term3Node = term3();
      t2pNode = term2Prime();
if (t2pNode != null) {
                              ((BinaryExpressionNode)t2pNode).setLeftOperand(term3Node);
                              term3Node.setParent(t2pNode);
                            }
                            else
                              t2pNode = term3Node;
                            term2PrimeNode = new SubtractExpressionNode(t2pNode);
                            term2PrimeNode.setLineNumber(token.beginLine);
                            t2pNode.setParent(term2PrimeNode);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
term2PrimeNode = null;
    }
{if ("" != null) return term2PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term3() throws ParseException {ExpressionNode term3Node;
        ExpressionNode factorNode = null;
        ExpressionNode term3PrimeNode = null;
    factorNode = factor();
    term3PrimeNode = term3Prime();
if (term3PrimeNode != null) {
                      ((BinaryExpressionNode)term3PrimeNode).setLeftOperand(factorNode);
                      term3Node = term3PrimeNode;
                      factorNode.setParent(term3Node);
                    }
                    else
                      term3Node = factorNode;
                    term3Node.setLineNumber(factorNode.getLineNumber());

                    {if ("" != null) return term3Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term3Prime() throws ParseException {ExpressionNode term3PrimeNode;
        ExpressionNode factorNode = null;
        ExpressionNode t3pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_TIMES:{
      token = jj_consume_token(O_TIMES);
      factorNode = factor();
      t3pNode = term3Prime();
if (t3pNode != null) {
                              ((BinaryExpressionNode)t3pNode).setLeftOperand(factorNode);
                              factorNode.setParent(t3pNode);
                            }
                            else
                              t3pNode = factorNode;
                            term3PrimeNode = new MultiplyExpressionNode(t3pNode);
                            term3PrimeNode.setLineNumber(token.beginLine);
                            t3pNode.setParent(term3PrimeNode);
      break;
      }
    case O_MOD:{
      token = jj_consume_token(O_MOD);
      factorNode = factor();
      t3pNode = term3Prime();
if (t3pNode != null) {
                              ((BinaryExpressionNode)t3pNode).setLeftOperand(factorNode);
                              factorNode.setParent(t3pNode);
                            }
                            else
                              t3pNode = factorNode;
                            term3PrimeNode = new ModExpressionNode(t3pNode);
                            term3PrimeNode.setLineNumber(token.beginLine);
                            t3pNode.setParent(term3PrimeNode);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
term3PrimeNode = null;
    }
{if ("" != null) return term3PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode factor() throws ParseException {ExpressionNode factorNode ;
        InvocationNode invocation = null;
        ExpressionNode fNode,exprNode = null;
        ASTVectorNode exprList = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_IDENTIFIER:{
      token = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_LBRACKET:
      case O_LPAREN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_LBRACKET:{
          jj_consume_token(O_LBRACKET);
          exprNode = expr();
          jj_consume_token(O_RBRACKET);
          break;
          }
        case O_LPAREN:{
          jj_consume_token(O_LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_NOT:
          case O_LPAREN:
          case O_CHAR:
          case O_IDENTIFIER:
          case O_FLOATCON:
          case O_INT:{
            exprList = expr_list();
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          jj_consume_token(O_RPAREN);
if (exprList == null)
                                                                          exprList = new ASTVectorNode();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
if (exprNode != null) {
                                factorNode = new ArrayReferenceNode(token.image,exprNode);
                                exprNode.setParent(factorNode);
                                } else if (exprList != null) {
                                        invocation = new InvocationNode(token.image,exprList);
                                        invocation.setLineNumber(token.beginLine);
                                        for (int i = 0; i < exprList.size(); i++) {
                                        ExpressionNode expr = (ExpressionNode)exprList.elementAt(i);
                                        expr.setParent(invocation);
                                        }
                                        factorNode = new FunctionInvocationNode(invocation);
                                    invocation.setParent(factorNode);
                                }
                                else
                                        factorNode = new ScalarReferenceNode(token.image);
                            factorNode.setLineNumber(token.beginLine);
      break;
      }
    case O_FLOATCON:
    case O_INT:{
      factorNode = constant();
      break;
      }
    case O_CHAR:{
      factorNode = character();
      break;
      }
    case O_LPAREN:{
      token = jj_consume_token(O_LPAREN);
      fNode = expr();
      jj_consume_token(O_RPAREN);
factorNode = new ParenthesisNode(fNode);
                            factorNode.setLineNumber(token.beginLine);
                            fNode.setParent(factorNode);
      break;
      }
    case O_NOT:{
      token = jj_consume_token(O_NOT);
      fNode = factor();
factorNode = new NotExpressionNode(fNode);
                            factorNode.setLineNumber(token.beginLine);
                            fNode.setParent(factorNode);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableReferenceNode variable() throws ParseException {VariableReferenceNode varNode;
        ExpressionNode exprNode = null;
        Token name;
    name = jj_consume_token(O_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_LBRACKET:{
      jj_consume_token(O_LBRACKET);
      exprNode = expr();
      jj_consume_token(O_RBRACKET);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
if (exprNode == null)
                                varNode = new ScalarReferenceNode(name.image);
                        else {
                        varNode = new ArrayReferenceNode(name.image,exprNode);
                        exprNode.setParent(varNode);
                        }
                    varNode.setLineNumber(name.beginLine);

                        {if ("" != null) return varNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode constant() throws ParseException {ConstantNode constNode;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O_INT:{
      constNode = integer();
      break;
      }
    case O_FLOATCON:{
      constNode = floatConst();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return constNode;}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerConstNode integer() throws ParseException {IntegerConstNode intNode;
        Token intConst;
    intConst = jj_consume_token(O_INT);
intNode = new IntegerConstNode(Integer.valueOf(intConst.image).intValue());
            intNode.setLineNumber(intConst.beginLine);
            {if ("" != null) return intNode;}
    throw new Error("Missing return statement in function");
  }

  static final public FloatConstNode floatConst() throws ParseException {FloatConstNode floatNode;
        Token floatConst;
    floatConst = jj_consume_token(O_FLOATCON);
floatNode = new FloatConstNode(Float.valueOf(floatConst.image).floatValue());
                floatNode.setLineNumber(floatConst.beginLine);
                {if ("" != null) return floatNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CharacterNode character() throws ParseException {CharacterNode charNode;
        Token character;
    character = jj_consume_token(O_CHAR);
charNode = new CharacterNode(character.image.charAt(1));
                charNode.setLineNumber(character.beginLine);
                {if ("" != null) return charNode;}
    throw new Error("Missing return statement in function");
  }

  static final public StringNode string() throws ParseException {StringNode stringNode;
        Token string;
    string = jj_consume_token(O_STRING);
int length = string.image.length();
                    stringNode = new StringNode(string.image.substring(1,length-1));
                    stringNode.setLineNumber(string.beginLine);
                    {if ("" != null) return stringNode;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_9()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(O_LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(O_ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(O_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NolifeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x208000,0x0,0x0,0x24500,0x24400,0x0,0x208000,0x4000000,0x0,0x0,0x208000,0x0,0x0,0x39810200,0x40000,0x40000,0x10800000,0x0,0x0,0x0,0x0,0x100080,0xc0000000,0x0,0x40,0x40000,0x0,0x0,0x40000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100000,0x80,0x0,0x0,0x810000,0x0,0x0,0x400,0x400,0x0,0x40,0x40,0x100000,0xd10400,0xd30400,0x0,0xc00000,0x40,0x80,0x80,0x0,0xf,0x6000,0x8000,0xd10400,0x500,0x500,0xd10400,0x100,0xc00000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NolifeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NolifeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NolifeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NolifeParser(NolifeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NolifeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
